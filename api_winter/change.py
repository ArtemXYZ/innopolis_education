import asyncio
from io import BytesIO
# from PIL import Image
import re

import aiohttp

from api_winter.aiohttp_session import RESTAsyncRequest
# -------------------------------- –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from configs import API_WEATHER


# ----------------------------------------------------------------------------------------------------------------------
class Winter:
    def __init__(self, api_token):

        self.api_token = api_token
        self.aiohttp_session = RESTAsyncRequest()
        # –ú–∞–ø–ø–∏–Ω–≥ –∏–∫–æ–Ω–æ–∫ –ø–æ–≥–æ–¥—ã –Ω–∞ —ç–º–æ–¥–∑–∏
        self.icon_to_emoji = {
            '01d': '‚òÄÔ∏è', '01n': 'üåë',  # —è—Å–Ω–æ–µ –Ω–µ–±–æ
            '02d': 'üå§', '02n': 'üå•',  # –Ω–µ–º–Ω–æ–≥–æ –æ–±–ª–∞—á–Ω–æ
            '03d': '‚òÅÔ∏è', '03n': '‚òÅÔ∏è',  # –æ–±–ª–∞—á–Ω–æ
            '04d': 'üå•', '04n': 'üå•',  # –æ—á–µ–Ω—å –æ–±–ª–∞—á–Ω–æ
            '09d': 'üåß', '09n': 'üåß',  # –¥–æ–∂–¥—å
            '10d': 'üå¶', '10n': 'üåß',  # —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å
            '11d': '‚õà', '11n': '‚õà',  # –≥—Ä–æ–∑–∞
            '13d': '‚ùÑÔ∏è', '13n': '‚ùÑÔ∏è',  # —Å–Ω–µ–≥
            '50d': 'üå´', '50n': 'üå´',  # —Ç—É–º–∞–Ω
        }

    @staticmethod
    async def get_icon(icon: str):
        """
            –ü–æ–ª—É—á–∞–µ–º URL-—Å—Ç—Ä–æ–∫—É –∏–∫–æ–Ω–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –∏–∑ json
            01n.png -> 01d
        """

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã 'n' –Ω–∞ 'd'
        icon_new = re.sub(r'n', 'd', icon)
        url_icon = (f'https://openweathermap.org/img/wn/{icon_new}@2x.png')

        # async with aiohttp.ClientSession() as session:
        #     async with session.get(url_icon) as response:
        #
        #         icon_data = await response.read()
        #         icon_png = Image.open(BytesIO(icon_data))
        #
        #         # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
        #         img_byte_arr = BytesIO()
        #         icon_png.save(img_byte_arr, format='PNG')
        #         img_byte_arr.seek(0)
        #
        # return img_byte_arr
        return url_icon

    async def get_icon_emoji(self, icon: str):
        """
        –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
        """
        icon_emoji = self.icon_to_emoji.get(icon, '')
        return icon_emoji

    async def get_country_coordinate(self, input_city_name, input_limit=None):
        """
            –£–∑–Ω–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞
            # :param api_weather: API –∫–ª—é—á –¥–ª—è OpenWeatherMap
            :param input_city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
            :param input_limit: –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
            :return: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
        """

        if input_limit is None:

            url = (f'http://api.openweathermap.org/geo/1.0/direct?q={input_city_name}&appid={self.api_token}')

        else:

            url = (
                f'http://api.openweathermap.org/geo/1.0/direct?q={input_city_name}'
                f'&limit={input_limit}&appid={self.api_token}'
            )

        data = await self.aiohttp_session.get_async_response(url)

        if data:

            return data[0]['lat'], data[0]['lon'], data[0].get('country')
        else:
            print("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None, None, None

            # raise ValueError("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    async def get_weather_by_coordinate(self, lat, lon, url_type_prognosis: str):
        """
            –£–∑–Ω–∞–µ–º –ø–æ–≥–æ–¥—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.

            :param lat: –®–∏—Ä–æ—Ç–∞
            :param lon: –î–æ–ª–≥–æ—Ç–∞
            :param API_WEATHER: API –∫–ª—é—á –¥–ª—è OpenWeatherMap
            :return: –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ

            metric  - units	–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ	–î–æ—Å—Ç—É–ø–Ω—ã –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è. standard, metric –∏ imperial –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è.
            cnt - –ß—Ç–æ–±—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ API, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ cnt.

        """

        # –ü–æ —É—Å–ª–æ–≤–∏—é –≤—ã–¥–∞–µ–º —Ç–∏–ø url –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω–æ–≥–æ —Ä–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º json

        if url_type_prognosis == 'now':  # –ü—Ä–æ–≥–Ω–æ–∑ —Å–µ–π—á–∞—Å +

            url = (
                f'https://api.openweathermap.org/data/2.5/weather?lat={lat}'
                f'&lon={lon}&appid={self.api_token}&units=metric'
            )

        elif url_type_prognosis == '5day':  # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ 3 —á–∞—Å–∞ + (–≤ –Ω–∞—à–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ = 48 —á–∞—Å–æ–≤).

            # –ó–∞–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–º—É URL –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã —Å —á–∞—Å–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 48 —á–∞—Å–æ–≤ –∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ,
            # –∏—Å–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∏–Ω—É—Ç–∞–º –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã.
            url = (f'https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&exclude=minutely,'
                   f'daily&appid={self.api_token}&units=metric')

        data = await self.aiohttp_session.get_async_response(url)
        return data

    # –í—ã–¥–∞—Ç—å –ø–æ–≥–æ–¥—É (json –Ω–∞ –≤—ã—Ö–æ–¥–µ)
    async def get_weather(self, input_city_name, url_type_prognosis: str = 'now'):
        # try:

        # 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
        lat, lon, country_code = await self.get_country_coordinate(input_city_name, input_limit=1)

        # print(f'lat, lon, country_code: {lat}, {lon}, {country_code}')

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –≤ json
        weather_data = await self.get_weather_by_coordinate(lat, lon, url_type_prognosis)
        return weather_data

        # except Exception as e:
        #     print(f'–û—à–∏–±–∫–∞ : {e}')
